use MooseX::Declare;

class App::WargamersPledge::Model::API extends Catalyst::Model::DBIC::Schema {
    use App::WargamersPledge::Model::API::Types ':all';
    use Gravatar::URL;
    
    __PACKAGE__->config(
        schema_class => 'App::WargamersPledge::Schema',

        connect_info => {
            dsn => 'dbi:mysql:wgpledge',
            user => 'wgpledge',
            password => 'wgpledge',
        }
    );

    method add_to_stash( Str $user, Str :$description, Int :$number, Str :$manufacturer?, Str :$scale?, Str :$notes?, DateTime :$when? ) {
        $when //= DateTime->now();

        my $u = $self->resultset("User")->find($user);
        
        my $args = { description => $description, purchased => $when, num => $number };
        $args->{manufacturer} = $manufacturer if defined $manufacturer;
        $args->{scale} = $scale if defined $scale;
        $args->{notes} = $notes if defined $notes;
        
        $u->add_to_purchases($args);
    }   

    method get_figure_stash (Str $user, HashRef :$search?) {
        my $rs = $self->resultset("User");
        
        my @stash = $rs->search( { id => $user} )->purchases($search);
        return map { $_->id => { $_->get_columns} } @stash;
    }

    method do_action ( Int $purchase, Int :$number, Str :$state?, DateTime :$when?, Str :$notes?, Str :$as? ) {
        $when //= DateTime->now();
        $state //= 'painted';
        
        my $purchase_rs = $self->resultset("Purchase")->find( $purchase );
        
        my $args = { state => $state, num => $number, done => $when };
        $args->{notes} = $notes if defined $notes;
        $args->{use_as} = $as if defined $as;
        
        $purchase_rs->add_to_actions($args);
    }


    method get_actions (Str $user, HashRef $search?) {
        my @actions = $self->resultset("User")->find($user)->actions($search);
        return map { $_->id => { $_->get_columns } } @actions;
    }

    method get_stats (Str $user) {
        my $rs = $self->resultset("User");
        
        my $bought = $rs->purchases()->get_column('num')->sum();
        
        # the simpleminded version
        my $painted = $rs->actions({ action => 'painted'})->get_column('num')->sum();
        
        return { bought => $bought, painted => $painted };
    }

    method get_profile (Str $user) {
        my ($profile) = $self->resultset("User")->find($user);
        return $profile unless defined $profile;
        
        # Figure out what icon to use
        #   Initially this will be based on the email address.
        #   We'll add more methods later.
        my $email = $profile->email;
        my $gravatar_url = gravatar_url(email => $email);
        
        return {
            avatar_url => $gravatar_url,
            username   => $user,
            email      => $email,
            created    => $profile->created,
            last       => $profile->last,
        }
    }
}



=head1 NAME

App::WargamersPledge::Model::API - Catalyst DBIC Schema Model

=head1 SYNOPSIS

See L<App::WargamersPledge>

=head1 DESCRIPTION

L<Catalyst::Model::DBIC::Schema> Model using schema L<App::WargamersPledge::Schema>

=head1 GENERATED BY

Catalyst::Helper::Model::DBIC::Schema - 0.48

=head1 AUTHOR

Mike Whitaker

=head1 LICENSE

This library is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

1;
